trigger:
  branches:
    include:
    - main
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: 'testResults_$(System.JobAttempt)'
  sourceFolderName: source
  defaultBranch: main

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'windows-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-2022'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          # This task need to use Windows PowerShell due to a bug in PS7 that cannot
          # find/use class-based DSC resources that uses inheritance, which result in
          # the examples cannot compile. See the following issue for more information:
          # https://github.com/dsccommunity/DnsServerDsc/issues/268#issuecomment-918505230
          - powershell: |
              # Workaround for issue https://github.com/dsccommunity/DscResource.Test/issues/100
              ./build.ps1 -Task noop

              $pesterConfig = New-PesterConfiguration
              $pesterConfig.Run.Path = '.\tests\QA'
              $pesterConfig.Run.Throw = $true
              $pesterConfig.Output.Verbosity = 'Detailed'

              Invoke-Pester -Configuration $pesterConfig
            name: qualityTest
            displayName: 'Run DscResource.Base QA Test'
          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            condition: succeededOrFailed()
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: Test_Unit
        displayName: 'Unit'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterPath 'tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit (Windows Server 2019)'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)
              parallel: true

      - job: Test_Integration
        displayName: 'Integration'
        strategy:
          matrix:
            POWERSHELL_WIN2019:
              JOB_VMIMAGE: 'windows-2019'
              JOB_PWSH: true
            POWERSHELL_WIN2022:
              JOB_VMIMAGE: 'windows-2022'
              JOB_PWSH: true
            WINDOWSPOWERSHELL_WIN2019: # cSpell: disable-line
              JOB_VMIMAGE: 'windows-2019'
              JOB_PWSH: false
            WINDOWSPOWERSHELL_WIN2022: # cSpell: disable-line
              JOB_VMIMAGE: 'windows-2022'
              JOB_PWSH: false
        pool:
          vmImage: $(JOB_VMIMAGE)
        timeoutInMinutes: 0
        variables:
          # This sets environment variable $env:CI.
          CI: true
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterPath 'tests/Integration'"
              pwsh: $(JOB_PWSH)
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Integration ($(TEST_CONFIGURATION) / $(JOB_VMIMAGE))'

      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        dependsOn: Test_Unit
        condition: succeededOrFailed()
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(testArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)'
          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage to Azure DevOps'
            inputs:
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'
          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml" -F unit
            displayName: 'Publish Code Coverage to Codecov.io'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
